What happens when you initialize a repository? Why do you need to do it?

  When I initialize a repository it prepares the project for tracking.  You have to initialize it in order to allow git to setup the .git directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

  The staging area will contain files that you add, with the git add command. This makes them ready to commit.
  The working directory contains all of the files that have changed, or not.
  The repository contains the snapshots of the files that you have commited.

How can you use the staging area to make sure you have one commit per logical change?

  By using git diff --staged you can see if the changes that you have added to the staging area are just one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

  If I wanted to work on a new feature for the program, or alter the program in a big way, branches would be helpful.  Branches would help by organizing my work by giving me a branch that allows me to work on that feature and nothing else.

How do the diagrams help you visualize the branch structure?

  Diagrams help me to visualize the structure of the repo and tells me what branches are reachable from any other branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  Merging to branches together brings all of their commits together.
  It is shown in the diagrams in that way because it was a seperate branch, but then it is brought back into the master branch.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

  Automatic merging
    Pros:
    Easy

    Cons:
    Can not always merge when there are conflicts

    Manual merging
    Pros:
    None

    Cons:
    Takes time to find conflicts and resolve them